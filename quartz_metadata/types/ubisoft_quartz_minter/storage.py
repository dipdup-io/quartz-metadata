# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    address_0: str
    address_1: str
    nat: str


class OperatorItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: Dict[str, Any]


class Key1(BaseModel):
    class Config:
        extra = Extra.forbid

    address_0: str
    address_1: str


class OperatorForAllItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key1
    value: Dict[str, Any]


class UserPermits(BaseModel):
    class Config:
        extra = Extra.forbid

    created_at: str
    expiry: Optional[str]


class Permits(BaseModel):
    class Config:
        extra = Extra.forbid

    counter: str
    user_expiry: Optional[str]
    user_permits: Dict[str, UserPermits]


class UbisoftQuartzMinterStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    admin: str
    admin_candidate: Optional[str]
    archetype: Optional[str]
    default_expiry: str
    ledger: Dict[str, str]
    metadata: Dict[str, str]
    operator: List[OperatorItem]
    operator_for_all: List[OperatorForAllItem]
    paused: bool
    permits: Dict[str, Permits]
    token_metadata_uri: str
